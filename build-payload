#!/usr/bin/env python3

import sys
import os
import re
from subprocess import call

if len(sys.argv) < 2:
  print('Syntax: {} craftfile'.format(sys.argv[0]))
  sys.exit(1)

binpath, _ = os.path.split(os.path.abspath(__file__))
filepath, _ = os.path.split(os.path.abspath(sys.argv[1]))
bins = list()

def add_bin(raw):
  index = len(bins)
  s = '|_*/{:03d}\\*_|'.format(index)
  bins.insert(index, (s, raw))
  return s

def parser(match):
  grp = match.group(1)
  args = match.group(2)
  return _rparser(grp, match)

def _rparser(grp, args):
  if grp == 'dummy':
    return 'A'*int(args)
  elif grp == 'repeat':
    matches = re.findall(r'((?:"(?:\\.|[^"\\])*"|[0-9]+))', args)
    matches[0] = matches[0][1:-1]
    return matches[0]*int(matches[1])
  elif grp == 'shellcode32':
    call(['{}/btz-payload-32'.format(binpath), '{}.s'.format(args), args])
    code = open(args, 'rb').read()
    return add_bin(code)
  elif grp == 'var':
    path = '{}/btz-vars/{}'.format(filepath, args)
    if not os.path.isfile(path):
      print('{}: No such file'.format(path))
      return ''
    return add_bin(open(path, 'rb').read())

file = open(sys.argv[1], 'r')

inter = re.sub(r'\[([a-zA-Z0-9]+) ([^]]+)\]', parser, file.read())
res = bytes(inter, 'utf-8')
for bin in bins:
  res = res.replace(bytes(bin[0], 'utf-8'), bin[1])

file = open('{}.bin'.format(sys.argv[1]), 'wb')
file.write(res)
